#When adding effects directly in on_actions always consider if it would be best to do so through a scripted effect. on_actions with a lot of script in them are harder to get an overview of.

# country
on_startup = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_startup "
	}
    
    # Random Seed
    set_random_seed_flags = yes
    
    emperor = {
		save_global_event_target_as = Emperor
	}
    
    # Default "Old Horde Leader" event target to Shadowmoon
    A34 = {
        save_global_event_target_as = old_horde_leader
    }
    
	if = {
		limit = {
			is_emperor_of_china = yes
		}
		save_global_event_target_as = celestial_emperor
	}
    
    # Set the first player nation as the Host Player, which will receive the single-fire player only events in multiplayer.
    if = {
        limit = {
            ai = no
            NOT = { has_global_flag = set_host_player }
        }
        
        set_global_flag = set_host_player
        set_country_flag = host_player
    }
    
    unlock_initial_cults = yes
	wwu_add_canals = yes
    set_achievement_start_state = yes
    
    events = {
        wwu_setup.1         # Global
        wwu_setup.2         # Country
        wwu_loa.1           # Troll - Starting Loa Influence
        wwu_zandalar.100    # Zandalar Setup
        wwu_game_configuration.100 # Default Configuration
        wwu_doctrine.100    # Default
        wwu_terrain_affinity.100
        wwu_hold_system.100
        wwu_game_configuration.1
	}
    
    # Temporary Age progression until events are done - For bookmark starts
    if = {
        limit = {
            ai = no
        }
        
        if = {
            limit = {
                current_age = age_trouble_in_azeroth
            }
            country_event = { id = wwu_age_progression.1 days = 10950 }
        }
        if = {
            limit = {
                current_age = age_burning_crusade
            }
            country_event = { id = wwu_age_progression.2 days = 10950 }
        }
        if = {
            limit = {
                current_age = age_wrath_of_the_lich_king
            }
            country_event = { id = wwu_age_progression.3 days = 10950 }
        }
        if = {
            limit = {
                current_age = age_cataclysm
            }
            country_event = { id = wwu_age_progression.4 days = 10950 }
        }
        if = {
            limit = {
                current_age = age_mists_of_pandaria
            }
            country_event = { id = wwu_age_progression.5 days = 10950 }
        }
    }
}

# country
on_religion_change = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_religion_change "
	}
    
    on_religion_change_estate_privileges_effect = yes
    on_religion_change_effect = yes
}

# country.
on_secondary_religion_change = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_secondary_religion_change "
	}
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_enforce_rebel_demands "
	}
    
	# ROOT = The winning country
	# FROM = The loosing country
	set_country_flag = helped_rebels_win_war
}

# country
on_colonial_liberation = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_colonial_liberation "
	}
}

# country
on_colonial_reintegration = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_colonial_reintegration "
	}
}

# country
on_peace_actor = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_peace_actor "
	}
}

# country
on_peace_recipient = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_peace_recipient "
	}
}

# country
# root = winning country, from = loser country
on_war_won = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_war_won "
	}

    change_variable = {
        which = war_won
        value = 1
    }
    
    doctrine_on_war_won_effect = yes
    
    # War ends - these should only apply if the war end causes the winner to end the war
    if = {
        limit = {
            is_at_war = no
        }
        
        aggressive_expansion_on_war_won_effect = yes
        mission_on_war_won_effect = yes
        invasion_on_war_won_effect = yes
        government_on_war_won_effect = yes
    }
    
	events = {
        tributary_events.32
        
        wwu_elemental_attunement.1 # Triumph of the Elements 
        
        wwu_nightfallen.101 # Arcane Siphoning
        
        wwu_artifact_unlocks.3 # Blades of the Fallen Prince
        
        wwu_mantid.4 # Lessons from the Cycle
	}
}

# root = winning country, from = loser country
on_main_war_won = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_main_war_won "
	}
    
}

# root = winning country, from = loser country
on_separate_war_won = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_separate_war_won "
	}
    
}

# country
# root = loser country, from = winner country
on_war_lost = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_war_lost "
	}
    
	change_variable = {
		which = war_lost
		value = 1
	}
    add_country_modifier = {
		name = just_lost_war_timer
		duration = 10
		hidden = yes
	}
    
    mission_on_war_lost_effect = yes
    invasion_on_war_lost_effect = yes
    
	events = {
        tributary_events.32
        
        wwu_elemental_attunement.2 # Sorrow of the Elements
        
        wwu_nightfallen.100 # Failure in War
	}
}

on_main_war_lost = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_main_war_lost "
	}
    
}
on_separate_war_lost = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_separate_war_lost "
	}
    
}

# country
# root = winning country, from = loser country
on_battle_won_country = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_battle_won_country "
	}

	if = {
		limit = {
			FROM = { tag = REB }
		}
		change_variable = {
			which = rebels_suppressed
			value = 1
		}
	}
    
    if = {
        limit = {
            has_country_modifier = chaos_demonic_annihilation
            FROM = {
                culture_group = culture_group_demonic
            }
        }
        
        add_prestige = 5
        add_mil_power = 5
    }
    
    # Warrior's Guild
    if = {
        limit = {
            has_estate_privilege = estate_warriors_guild_forged_in_battle
        }
        
        if = {
            limit = {
                has_dlc = "Cradle of Civilization"
            }
            
            add_army_professionalism = 0.01
            add_army_tradition = 1
        }
        else = {
            add_army_tradition = 2
        }
    }
    
    government_on_battle_won_country_effect = yes
    faction_on_battle_won_country_effect = yes
    
    events = {
        wwu_scourge_estate.3 # Raise the Dead
        wwu_scourge_estate.4 # Raise the Dead
    }
    
    random_events = {
        2000 = 0
        100 = wwu_mantid.7 # Mantid Trophies
        100 = wwu_yaungol.4 # Yaungol Pride
    }
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_battle_lost_country "
	}
    
	battle_cult_spreading_effect = yes
    artifact_on_battle_lost_country_effect = yes
    ideagroups_on_battle_lost_country_effect = yes
    government_on_battle_lost_country_effect = yes

	random_events = {
		12 = 0
		2 = friendship_events.1 #Historical Friendship Broken
	}
}

# province
# root = location, from = loser country
on_battle_won_province = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_battle_won_province "
	}
    
}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - on_battle_won_unit "
	}
	if = {
		limit = {
			unit_owner = { ai = no } #Scopes to Unit Owner from Unit Scope
			general_with_steam_name = yes #Unit Scope Trigger
		}
		unit_owner = { set_country_flag = general_with_steam_name_won_battle }
	}
}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - on_battle_lost_unit "
	}
    
}

# province
# root = location, from = country doing it
on_added_to_trade_company ={
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_added_to_trade_company "
	}

}

# province
# root = location, from = country doing it
on_removed_from_company ={
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_removed_from_company "
	}

}

# province
# root = location, from = country doing it
on_company_formed ={
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_company_formed "
	}

}

# province
# root = location, from = country doing it
on_company_disolved = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_company_disolved "
	}

}

# province
# root = location, from = winner country
on_battle_lost_province = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_battle_lost_province "
	}
    
    government_on_on_battle_lost_province_effect = yes
    
    # Ideagroup: Dominion: Forged in Battle
    if = {
        limit = {
            FROM = {
                has_idea = wwu_dominion_ideas_1
            }
            is_sea = yes
        }
        
        FROM = {
            add_prestige = 5
        }
    }
}

# country
# root = winning country, from = location
on_siege_won_country = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_siege_won_country "
	}
    
    government_on_siege_won_country_effect = yes
    invasion_on_siege_won_country_effect = yes
    
    if = {
        limit = {
            culture_group = culture_group_scourge
            FROM = {
                has_province_modifier = zuldrak_fertile_land
            }
        }
        FROM = {
            remove_province_modifier = zuldrak_fertile_land
        }
    }
    
    # Adventurer's Guild
    if = {
        limit = {
            has_estate_privilege = estate_adventuring_guild_encourage_sacking
        }
        
        # Cascade
        if = {
            limit = {
                FROM = { development = 30 }
            }
            
            add_treasury = 10
        }
        if = {
            limit = {
                FROM = { development = 25 }
            }
            
            add_treasury = 10
        }
        if = {
            limit = {
                FROM = { development = 20 }
            }
            
            add_treasury = 10
        }
        if = {
            limit = {
                FROM = { development = 15 }
            }
            
            add_treasury = 10
        }
        if = {
            limit = {
                FROM = { development = 10 }
            }
            
            add_treasury = 10
        }
        
        add_treasury = 10
    }
    
    # Religious Order
    if = {
        limit = {
            has_estate_privilege = estate_adventuring_guild_encourage_sacking
            FROM = {
                is_capital = no
            }
        }
        
        FROM = {
            change_religion = ROOT
            add_unrest = 5
        }
    }
    
    random_events = {
		10 = army_professionalism_events.1 # City Sacked
		100 = 0
	}
}

# country
# root = losing country, from = location
on_siege_lost_country = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_siege_lost_country "
	}
}

# province
# root = location, from = losing country
on_siege_won_province = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_siege_won_province "
	}
    
    homeland_doctrine_effect = yes
    rebel_doctrine_effect = yes
}

# province
# root = location, from = winning country
on_siege_lost_province =  {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_siege_lost_province "
	}
    
    government_on_siege_lost_province_effect = yes
    relentless_conquest_on_siege_effect = yes
    siege_doctrine_effect = yes
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_abandon_colony "
	}
}

# province
# root = location, from = country that owns it
# Fired right after the great project is constructed
on_great_project_constructed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_great_project_constructed "
	}

}

# OBS: Consider that the following on_actions can be called for Personal Union juniors as well.
# country
on_new_monarch = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_new_monarch "
	}
    
    magic_on_new_monarch_effect = yes
    
    #---------------
    # Consort
    #---------------
	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = home_of_consort
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
    
    # Fire these unless Tribal Vote is enacted (it fires them itself after its passing)
    if = {
        limit = {
            NOT = { has_government_attribute = enables_tribal_vote }
        }
        country_event = { id = wwu_ruler_education.1 days = 7 } # The Education of [Root.Monarch.GetName]
        country_event = { id = wwu_government.8 days = 7 }      # Court Disposition
    }
    
    events = {
		wwu_dynastic.19
        
		wwu_pretender.1
    }
    
	random_events = {
		50 = wwu_dynastic.30
		250 = wwu_pretender.1
        
		1000 = 0
	}
	
}

on_new_consort = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_new_consort "
	}
    
	country_event = { id = wwu_consort.2 }
	
	if = {
		limit = { has_ruler_flag = had_10_years_anniversary }
		clr_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = had_20_years_anniversary }
		clr_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = consort_had_affection_of_ruler }
		clr_ruler_flag = consort_had_affection_of_ruler
	}
}

# country
on_monarch_death = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_monarch_death "
	}
    
    government_on_monarch_death_effect = yes
    magic_on_monarch_death_effect = yes
    faction_on_monarch_death_effect = yes
    
	events = {
		wwu_loa.1 # Influence of X
        wwu_shamanism.1 # Passing of Great Leader
        wwu_government.11 # Gavelkind Succession
	}
    
    random_events = {
        100 = wwu_government.12 # Puppet Ruler
        200 = 0
    }
	
}

# country
on_regent = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_regent "
	}
    
	events = {
		tribal_succession.1	# harsh anti-tribals.
	}
}

# country
on_extend_regency = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_extend_regency "
	}
    
	add_legitimacy = -10
}

# country
on_new_term_election = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_new_term_election "
	}
    
	events = {
		wwu_government.2    # On Term Election
	}
}

# country
on_death_election = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_death_election "
	}
    
	government_on_death_election_effect = yes
    
	events = {
		wwu_government.1    # On Death Election
        wwu_government.5    # Lottery Election
	}
}

# country
on_death_foreign_slave_ruler = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_death_foreign_slave_ruler "
	}
    
}

# country
on_replace_governor = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_replace_governor "
	}
    
	events = {
		wwu_government.3    # On Replace Governor
	}
}


# country
on_bankruptcy = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_bankruptcy "
	}
    
}

# country (country annexing, root = target)
on_diplomatic_annex = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_diplomatic_annex "
	}
    
	change_variable = {
		which = diplo_annexed_nation
		value = 1
	}
    
	events = {
		wwu_integration.1
	}
}

# country
on_heir_death = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_heir_death "
	}
    
	if = {
		limit = { has_country_flag = heir_dip_education }
		clr_ruler_flag = heir_dip_education
	}
	if = {
		limit = { has_country_flag = heir_mil_education }
		clr_ruler_flag = heir_mil_education
	}
	if = {
		limit = { has_country_flag = heir_adm_education }
		clr_ruler_flag = heir_adm_education
	}
	if = {
		limit = { has_ruler_flag = well_advised_tutored_heir }
		clr_ruler_flag = well_advised_tutored_heir
	}
	if = {
		limit = { has_ruler_flag = heir_went_on_grand_tour }
		clr_ruler_flag = heir_went_on_grand_tour
	}
	if = {
		limit = { has_country_flag = albrecht_achilles_flag }
		clr_country_flag = albrecht_achilles_flag #Death of original Albrecht Achilles
	}
	if = {
		limit = { has_ruler_flag = sancaga_cikma }
		clr_ruler_flag = sancaga_cikma
		every_owned_province = {
			limit = {
				has_province_modifier = heir_in_training
			}
			remove_province_modifier = heir_in_training
		}
	}
	if = {
		limit = { has_ruler_flag = returned_from_sancaga_sikma_province }
		clr_ruler_flag = returned_from_sancaga_sikma_province
	}
    
    events = {
        wwu_government.10 # Heir Apparent
    }
}

# country
on_queen_death = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_queen_death "
	}
    

	if = {
		limit = { has_consort_flag = 10_years_anniversary }
		set_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_consort_flag = 20_years_anniversary }
		set_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_consort_flag = consort_has_affection_of_ruler }
		set_ruler_flag = consort_had_affection_of_ruler
	}

	if = {
		limit = {
			has_regency = no
			NOT = { has_ruler_flag = widow_widower }
		}
		set_ruler_flag = widow_widower
	}
	if = {
		limit = { has_consort_regency = no }
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = { has_ruler_flag = accepted_help_from_spouses_family }
		clr_ruler_flag = accepted_help_from_spouses_family
	}
	if = {
		limit = { has_ruler_flag = helped_spouses_family }
		clr_ruler_flag = helped_spouses_family
	}
	if = {
		limit = { has_ruler_flag = refused_to_help_spouses_family }
		clr_ruler_flag = refused_to_help_spouses_family
	}
	if = {
		limit = { has_ruler_flag = lowborn_consort }
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	if = {
		limit = { has_ruler_flag = lowborn_consort }
		clr_ruler_flag = lowborn_consort
	}
	if = {
		limit = { has_country_modifier = consort_adm_advice }
		remove_country_modifier = consort_adm_advice
	}
	if = {
		limit = { has_country_modifier = consort_dip_advice }
		remove_country_modifier = consort_dip_advice
	}
	if = {
		limit = { has_country_modifier = consort_mil_advice }
		remove_country_modifier = consort_mil_advice
	}
	if = {
		limit = { has_country_modifier = without_spouse_advice }
		remove_country_modifier = without_spouse_advice
	}
	if = {
		limit = { has_ruler_modifier = affectionate_royal_couple }
		remove_country_modifier = affectionate_royal_couple
	}
	clr_ruler_flag = marriage_length
}

# country
on_new_heir = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_new_heir "
	}
    
}

# country
on_weak_heir_claim = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_weak_heir_claim "
	}
    
}

# country : no heir in theocracy
on_heir_needed_theocracy = {
    # VAWSER: Disabled since this fires every tick for all theocracies, even if they don't use heirs.
	# if = { 
		# limit = { has_global_flag = enable_onaction_logging }
		# log = "DEBUG - [Root.GetName]: on_heir_needed_theocracy "
	# }
}

# Emperor from same dynasty
on_successive_emperor = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_successive_emperor "
	}
    
    emperor = {
        add_imperial_influence = 5
    }
}

on_emperor_elected = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_emperor_elected "
	}
    
	every_elector = {
		if = {
			limit = {
				preferred_emperor = root
			}
			change_variable = {
				which = supported_successive_emperors
				value = 1
			}
		}
		else = {
			set_variable = {
				which = supported_successive_emperors
				value = 0
			}
		}
	}

	emperor = {
		save_global_event_target_as = Emperor
	}
}

# HRE Prince released by the emperor
on_released_hre_member = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_released_hre_member "
	}
    
    emperor = {
        add_imperial_influence = 10
    }
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_member_false_religion "
	}
    
}

# HRE Prince converts to Emperor religion
on_hre_member_true_religion = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_member_true_religion "
	}
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_wins_defensive_war "
	}
    
    emperor = {
        add_imperial_influence = 10
    }
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_member_annexed "
	}
    
    emperor = {
        add_imperial_influence = -10
    }
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_released_vassal "
	}
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_transfered_vassal "
	}
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_defense "
	}
    
    emperor = {
        add_imperial_influence = 5
    }
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_non_defense "
	}
    
    emperor = {
        add_imperial_influence = -10
    }
}

# HRE Member takes a HRE province from an outs100e country in a peace (province scope)
on_hre_province_reconquest = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_province_reconquest "
	}
}

on_lock_hre_religion = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_lock_hre_religion "
	}
    
}

on_change_hre_religion = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_change_hre_religion "
	}
    
}

on_hre_religion_white_peace = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_religion_white_peace "
	}
    
}

# When a non-native changes government type
on_government_change = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_government_change "
	}
    
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = home_of_consort
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_native_change_government "
	}
    
}

# Nation is integrated after being in union
on_integrate = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_integrate "
	}
    
	events = {
		wwu_integration.1
	}
}

# Nation annexed.
# FROM is the nation being annexed
on_annexed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_annexed "
	}
    
	change_variable = {
		which = annexed_nation
		value = 1
	}
    
    on_annexed_estate_privileges_effect = yes
    faction_on_annexed_effect = yes
    transfer_artifacts = yes
}

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_chinese_empire_dismantled "
	}
    
	clear_global_event_target = celestial_emperor
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_mandate_of_heaven_gained "
	}
	if = {
		limit = {
			is_emperor_of_china = yes
		}
		save_global_event_target_as = celestial_emperor
	}
    
	set_mandate = 60
	set_meritocracy = 60
    add_country_modifier = {
		name = new_leader_of_the_aspects
		duration = 9125
	}
    if = {
		limit = {
			has_country_modifier = lost_mandate_of_heaven
		}
		remove_country_modifier = lost_mandate_of_heaven
	}
}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_mandate_of_heaven_lost "
	}
    
	add_country_modifier = {
		name = lost_mandate_of_heaven
		duration = 7300
	}
    
    add_stability = -2
    
}

on_embrace_revolution = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_embrace_revolution "
	}
	
}

on_dismantle_revolution = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_dismantle_revolution "
	}
	
}

# province
on_adm_development = {
    owner = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [ROOT.GetName], [owner.GetName]: on_adm_development "
        }
    }
    
    update_hold_status = yes
}

# province
on_dip_development = {
    owner = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [Root.GetName], [owner.GetName]: on_dip_development "
        }
    }
    
    update_hold_status = yes
}

# province
on_mil_development = {
    owner = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [Root.GetName], [owner.GetName]: on_mil_development "
        }
    }
    
    update_hold_status = yes
}

on_overextension_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_overextension_pulse "
	}
    
	random_events = {
		100 = wwu_overextension.1
		100 = wwu_overextension.2
		100 = wwu_overextension.3
		100 = wwu_overextension.4
		100 = wwu_overextension.5
		100 = wwu_overextension.6
		100 = wwu_overextension.7
		100 = wwu_overextension.8
		100 = wwu_overextension.9
		100 = wwu_overextension.10
        100 = wwu_overextension.11
        400 = 0
	}
}


on_colonial_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_colonial_pulse "
	}
}

on_siberian_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_siberian_pulse "
	}
}

# country random events
on_monthly_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_monthly_pulse "
	}
    
    # Random Seed
    set_random_seed_flags = yes
    
    # Mana Regeneration
    update_mana_regeneration = yes
    
    # Ambient Objects
    update_ambient_objects = yes
    
    # Consort - Monarch Power Generation
    generate_monarch_power_from_consort = yes
    
    # Subject Integration
    subject_annexation_effect = yes
    
    # Faction Government Mechanics
    update_faction_government_mechanics = yes
    
    # Artifact Modifier Assignment/Removal
    update_artifact_modifier_assignment = yes
    
    # Racial Administration/Military Assignment/Removal
    update_racial_modifier_assignment = yes
    
    # Doctrine Modifier Assignment/Removal
    update_doctrine_assignment = yes
    
    # Civilization Modifier Assignment/Removal
    update_civilization_assignment = yes
    
    # Story Flag Assignment/Removal
    update_story_state = yes
    
    # Misc Modifier Assignment/Removal
    update_monthly_modifiers = yes
    
    events = {
        # Doctrines
        wwu_doctrine.60
        wwu_doctrine.61
        wwu_doctrine.62
        wwu_doctrine.63
        wwu_doctrine.64
        wwu_doctrine.65
        wwu_doctrine.66
        wwu_doctrine.67
        wwu_doctrine.68
    
        # Factions
        wwu_faction_system_government.1 # Promotion - Alliance
        wwu_faction_system_government.2 # Promotion - Horde
        wwu_faction_system_government.3 # Promotion - Old Horde
        wwu_faction_system_government.4 # Promotion - Old Horde (Gorian)
        wwu_faction_system_government.5 # Promotion - Trade Coalition
        wwu_faction_system_government.6 # Promotion - Dragon Aspects
        
        wwu_faction_system_government.10 # Demotion - Alliance
        wwu_faction_system_government.11 # Demotion - Horde
        wwu_faction_system_government.12 # Demotion - Old Horde
        wwu_faction_system_government.13 # Demotion - Trade Coalition
        wwu_faction_system_government.14 # Demotion - Dragon Aspects
        
        # Auto-Missionary
        wwu_auto_missionary.1
        
        # Religion
        wwu_religion.2
        
        # Raid
        wwu_raid.4
        wwu_raid.5
        
        # Ruler Class Training
        wwu_ruler_training.2
        wwu_ruler_training.3
        wwu_ruler_training.4
        wwu_ruler_training.5
        wwu_ruler_training.6
        wwu_ruler_training.7
        wwu_ruler_training.8
        wwu_ruler_training.9
        wwu_ruler_training.10
        wwu_ruler_training.11
        wwu_ruler_training.12
        wwu_ruler_training.13
        
        # Player Switch
        wwu_player_switch.100
        wwu_player_switch.101
        wwu_player_switch.102
        wwu_player_switch.103
        wwu_player_switch.104
        wwu_player_switch.105
        wwu_player_switch.106
        wwu_player_switch.107
        wwu_player_switch.110
        
        # Monument Research
        wwu_monument_research.1
        
        # Magic
        wwu_magic_effect.11 # Polymorph
        wwu_magic_effect.12 # Polymorph ends
        wwu_magic_effect.21 # Mirror Image
        wwu_magic_effect.22 # Mirror Image ends
        
        # Inventions
        wwu_inventions.1
        wwu_inventions.10
        
        # Invasion
        wwu_invasion.1
        wwu_invasion.2
        wwu_invasion.3
        wwu_invasion.110
        
        # Faction Leader Assignment
        wwu_faction_system_leader_assignment.1
        wwu_faction_system_leader_assignment.2
        wwu_faction_system_leader_assignment.3
        wwu_faction_system_leader_assignment.4
        wwu_faction_system_leader_assignment.5
        
        # Faction Collapse
        wwu_faction_system_collapse.10
        wwu_faction_system_collapse.11
        wwu_faction_system_collapse.12
        wwu_faction_system_collapse.13
        wwu_faction_system_collapse.14
        
        # Faction Support
        wwu_government_mechanics.10 # War Support
        
        # Civilization
        wwu_civilization.100
        
        # Scourge
        wwu_scourge.300
        
        # Outland Exodus
        wwu_outland_exodus.1
        wwu_outland_exodus.2
        wwu_outland_exodus.3
        wwu_outland_exodus.10
        
        # Knights of the Ebon Blade
        wwu_knights_of_the_ebon_blade.1
        
        # Kel Thuzad
        wwu_kel_thuzad.1
        wwu_kel_thuzad.2
        
        # World Tree
        world_tree.1
        world_tree.2
        
        # Tribal Succession
        tribal_succession.2
        
        # Subject Interactions
        subject_interaction_events.45
        subject_interaction_events.46
        
        # Quel'Thalas
        wwu_quelthalas.1
        
        # Privateers
        privateers.15
        
        # Nightfallen
        wwu_nightfallen.10
        
        # Council of Zanchul
        wwu_council_of_zanchul.11
        
        # Cocktail
        wwu_banana_flavour.100
        
        # Elune
        wwu_elune.3
        
        # Colonial Nation Boost
        wwu_colonial_nation_boost.1
        
        # Sunfury
        wwu_sunfury_f.1
        wwu_sunfury_f.2
        wwu_sunfury_f.3
        wwu_sunfury_f.4
        wwu_sunfury_f.5
        
        # Hold System
        wwu_hold_system.101
        wwu_hold_system.110
        
        # Azjol Nerub: Cultural Domination
        wwu_mission_azjol_nerub.1
        wwu_mission_azjol_nerub.2
        wwu_mission_azjol_nerub.3
        wwu_mission_azjol_nerub.4
        wwu_mission_azjol_nerub.5
        
        # Centres of Fanaticism
        wwu_centres_of_fanaticism.1
        wwu_centres_of_fanaticism.10
        wwu_centres_of_fanaticism.20
        wwu_centres_of_fanaticism.30
        wwu_centres_of_fanaticism.40
        wwu_centres_of_fanaticism.50
        wwu_centres_of_fanaticism.60
        wwu_centres_of_fanaticism.70
        wwu_centres_of_fanaticism.80
        wwu_centres_of_fanaticism.90
        wwu_centres_of_fanaticism.100
        
        # Mana
        wwu_magic.70
        
        # Lordaeron Survivors
        wwu_lordaeron_survivors.1
    }
}

on_yearly_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_yearly_pulse "
	}
    
    # Trade Good Price Swing
    # Only do this for the player so it occurs once
    if = {
        limit = {
            ai = no
        }
        
        randomise_goods_price = yes
    }
	
	# Do not want it to be checked on every month due to performance
	if = {
		limit = {
			has_country_flag = unified_dwarf
			is_at_war = yes
		}
		country_event = { id = wwu_dwarf.11 days = 31 random = 31 }
	}
    
    # Nerubian Tunnel Network
    update_nerubian_tunnel_network = yes
    
    events = {
        # Trade Companies
        trade_company_events.100
        
        # Natives
        wwu_natives.100
        
        # Missionaries 
        wwu_missionaries.100
        
        # Government
        wwu_government_heir.10
        
        # Outland
        wwu_setup_outland.1
        
        # Shadowfang
        wwu_shadowfang.1
        
        # Scourge
        wwu_scourge.1
        wwu_scourge.36
        
        # Darkshire
        wwu_story_misc.1
        
        # Illidari
        wwu_illidan.1
        wwu_illidan.2
        wwu_illidan.3
        wwu_illidan.4
        wwu_illidan.5
        wwu_illidan.6
        wwu_illidan.7
        wwu_illidan.10
        wwu_illidan.12
        wwu_illidan.20
        
        # Cataclysm
        cataclysm.3
        cataclysm.6
        
        # Broken Shore
        broken_shore.1
        
        # Ruler Class Training
        wwu_ruler_training.15
        
        # Monument Research
        wwu_monument_research.10
        wwu_monument_research.11
        wwu_monument_research.12
        wwu_monument_research.13
        wwu_monument_research.14
        wwu_monument_research.15
        wwu_monument_research.16
        wwu_monument_research.17
        wwu_monument_research.18
        wwu_monument_research.19
        wwu_monument_research.20
        wwu_monument_research.21
        wwu_monument_research.22
        wwu_monument_research.23
        wwu_monument_research.24
        wwu_monument_research.25
        
        # Monuments
        wwu_great_projects.1
        wwu_great_projects.2
        wwu_great_projects.3
        wwu_great_projects.4
        wwu_great_projects.5
        wwu_great_projects.6
        wwu_great_projects.7
        wwu_great_projects.8
        wwu_great_projects.10
        wwu_great_projects.11
        
        # Faction Support
        wwu_government_mechanics.11 # Relations
        
        # Discovery
        wwu_discovery.1
        wwu_discovery.3
        wwu_discovery.6
        wwu_discovery.7
        wwu_discovery.8
        wwu_discovery.9
        wwu_discovery.10
        wwu_discovery.11
        wwu_discovery.12
        wwu_discovery.13
        wwu_discovery.14
        
        # Scarlet Crusade
        wwu_mission_scarlet_crusade.8
        
        # Zem'lan Pirates
        wwu_zemlan_pirates.1
        wwu_zemlan_pirates.2
        wwu_zemlan_pirates.3
        wwu_zemlan_pirates.4
        
        # Zandalar 
        wwu_zandalar_rise_of_the_zandalari.1
        wwu_zandalar_rise_of_the_zandalari.2
        wwu_zandalar_rise_of_the_zandalari.3
        
        wwu_zandalar_pirate_invasion.1
        wwu_zandalar_pirate_invasion.2
        wwu_zandalar_pirate_invasion.3
        
        wwu_zandalar_pandaria_invasion.20
        wwu_zandalar_pandaria_invasion.30
        
        wwu_zandalar_naga_invasion.10
        wwu_zandalar_naga_invasion.11
        wwu_zandalar_naga_invasion.12
        
        wwu_zandalar_naga_invasion.20
        wwu_zandalar_naga_invasion.21
        wwu_zandalar_naga_invasion.22
        
        wwu_zandalar.7
        wwu_zandalar.30
        wwu_zandalar.31
        wwu_zandalar.32
        wwu_zandalar.33
        wwu_zandalar.42
        wwu_zandalar.101
        
        wwu_zandalar_great_civil_war.2
        
        wwu_zandalar_cataclysm.10
        wwu_zandalar_cataclysm.11
        wwu_zandalar_cataclysm.12
        wwu_zandalar_cataclysm.13
        wwu_zandalar_cataclysm.14
        
        # Reliquary
        reliquary_guild.1
        
        # Explorer's League
        explorers_league.1
        
        # The Missing Diplomat
        wwu_the_missing_diplomat.1
        wwu_the_missing_diplomat.10
        
        # Sunwell
        thalassian.1
        
        # Sunfury
        mission_sunfury.1
        
        # Silvermoon
        wwu_silvermoon.1
        wwu_silvermoon.2
        wwu_silvermoon.3
        
        # Aldor/Scryer
        wwu_setup_aldor_scryer.1
        
        # Shadow Council
        wwu_shadow_council.1
        wwu_shadow_council.2
        
        # Old Gods
        wwu_old_gods.1
        wwu_old_gods.2
        wwu_old_gods.3
        wwu_old_gods.4
        wwu_old_gods.11
        wwu_old_gods.12
        
        # Maw
        wwu_flavour_maw.1
        
        # Mantid
        wwu_mantid.2
        wwu_mantid.3
        
        # Lei Shen
        wwu_lei_shen.1
        wwu_lei_shen.2
        wwu_lei_shen.4
        
        # Kul Tiras
        wwu_kul_tiras.1
        wwu_kul_tiras.112
        wwu_kul_tiras.114
        wwu_kul_tiras.116
        
        # Ebon Blade
        wwu_ebon_blade_flavour.1
        wwu_ebon_blade_flavour.2
        wwu_ebon_blade_flavour.3
        wwu_ebon_blade_flavour.4
        
        # Karazhan
        karazhan.4
        karazhan.6
        karazhan.7
        
        # Hydraxian Waterlords
        wwu_hydraxia_waterlords.1
        wwu_hydraxia_waterlords.2
        
        # Gilneas
        wwu_gilneas.1
        
        # Forsaken
        wwu_forsaken.3
        wwu_forsaken.4
        wwu_forsaken.5
        wwu_forsaken.6
        wwu_forsaken.7
        wwu_forsaken.8
        
        # Dwarf
        wwu_dwarf.10
        
        # Stonemason Uprising
        wwu_stonemason_uprising.1
        
        # Council of Zanchul
        wwu_council_of_zanchul.10
        wwu_council_of_zanchul.12
        wwu_council_of_zanchul.100
        
        # Council of Tirisfal
        wwu_council_of_tirisfal.1
        
        # Army of the Light
        wwu_army_of_the_light.1
        
        # Argussian Reach
        wwu_argussian_reach.1
        
        # Arathor
        wwu_arathor_flavour.1
        
        # Anvilmar
        wwu_anvilmar.1
        
        # Drakkari
        wwu_drakkari.1
        wwu_drakkari.4
        
        # Druidism
        wwu_druidism.4
        
        # Emerald Nightmare
        wwu_emerald_nightmare.1
        
        # Sons of Lothar
        wwu_sons_of_lothar.1
        
        # Blackwing Lair
        wwu_blackwing_lair.1
        
        # Rise of the Blood God
        wwu_rise_of_the_blood_god.1
        
        # Terrain Affinity
        wwu_terrain_affinity.100
    }
    
    random_events = {
        # Raid
        100 = wwu_raid.3
        
        # Inventions
        300 = wwu_inventions.2
        300 = wwu_inventions.3
        300 = wwu_inventions.4
        300 = wwu_inventions.5
        
        # Invasion
        100 = wwu_invasion.10
        100 = wwu_invasion.11
        100 = wwu_invasion.12
        100 = wwu_invasion.13
        100 = wwu_invasion.100
        100 = wwu_invasion.101
        
        # Government
        500 = wwu_government_mechanics.3 # Criminal Acumen - Spying
        
        # Decisions
        500 = wwu_decision_events.2 # Kaja'mite
        500 = wwu_decision_events.1 # Mage Discovery
        
        # Archaeology
        300 = wwu_archaeology_dig.1
        300 = wwu_archaeology_dig.2
        300 = wwu_archaeology_dig.3
        300 = wwu_archaeology_dig.4
        300 = wwu_archaeology_dig.5
        300 = wwu_archaeology_dig.6
        300 = wwu_archaeology_dig.7
        300 = wwu_archaeology_dig.8
        300 = wwu_archaeology_dig.9
        
        # Gurubashi Conflict
        500 = wwu_gurubashi_conflict.1
        
        # Cataclysm
        500 = cataclysm.1
        500 = cataclysm.2
        100 = cataclysm.5
        
        # Zandalar
        200 = wwu_zandalar.1
        500 = wwu_zandalar.4
        500 = wwu_zandalar.5
        500 = wwu_zandalar.6
        500 = wwu_zandalar.7
        
        # Yaungol
        500 = wwu_yaungol.3
        
        # Titan Corruption
        500 = wwu_titan_corruption.3
        500 = wwu_titan_corruption.4
        
        # Nightfallen
        100 = wwu_nightfallen.1
        100 = wwu_nightfallen.2
        50  = wwu_nightfallen.3
        50  = wwu_nightfallen.4
        50  = wwu_nightfallen.5
        100 = wwu_nightfallen.6
        
        # Dwarf
        500 = wwu_dwarf.10
        
        # Consort
        100 = wwu_consort.1
        100 = wwu_consort.2
        100 = wwu_consort.3
        100 = wwu_consort.4
        100 = wwu_consort.5
        50  = wwu_consort.6
        100 = wwu_consort.51
        100 = wwu_consort.52
        100 = wwu_consort.53
        100 = wwu_consort.54
        100 = wwu_consort.55
        100 = wwu_consort.56
        100 = wwu_consort.61
        100 = wwu_consort.101
        100 = wwu_consort.102
        100 = wwu_consort.103
        100 = wwu_consort.104
        100 = wwu_consort.301
        100 = wwu_consort.302
        100 = wwu_consort.303
        100 = wwu_consort.304
        100 = wwu_consort.305
        100 = wwu_consort.306
        100 = wwu_consort.307
        100 = wwu_consort.308
        100 = wwu_consort.309
        100 = wwu_consort.311
        100 = wwu_consort.312
        100 = wwu_consort.313
        100 = wwu_consort.314
        100 = wwu_consort.315
        
        # Drakkari
        100 = wwu_drakkari.3
        
        # Sunfury
        100 = mission_sunfury.6
        1000 = 0
    }
    
    #-----------------------------
    # Hold System
    #-----------------------------
    random_events = {
        # System
        100 = wwu_hold_system.102
        
        # Generic
        100 = wwu_hold_system.10
        100 = wwu_hold_system.11
        100 = wwu_hold_system.12
        100 = wwu_hold_system.13
        100 = wwu_hold_system.14
        100 = wwu_hold_system.15
        100 = wwu_hold_system.16
        
        # Kobold
        100 = wwu_hold_system.20
        100 = wwu_hold_system.21
        100 = wwu_hold_system.22
        
        # Trogg
        100 = wwu_hold_system.30
        100 = wwu_hold_system.31
        100 = wwu_hold_system.32
        
        # Furbolg
        
        # Quillboar
        
        # Titan/Earthen
        
        # Dwarf
        
        1000 = 0
    }
}
on_yearly_pulse_2 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_yearly_pulse_2 "
	}
    
    # Nation Setup
    random_events = {
        20 = wwu_setup_zangar.1 # Sporeggar
        20 = wwu_setup_worgen.1 # Wolfcult
        20 = wwu_setup_worgen.3 # Nightbane
        20 = wwu_setup_pirate.1 # Bloodsail Buccaneers
        20 = wwu_setup_orc.1 # Twilight's Hammer
        20 = wwu_setup_orc.10 # Orgrimmar
        20 = wwu_setup_orc.14 # Black Tooth Grin
        20 = wwu_setup_orc.16 # Dragonmaw
        20 = wwu_setup_orc.18 # Frostwolf
        20 = wwu_setup_ethereal.1 # The Consortium
        20 = wwu_setup_ethereal.2 # Ethereum
        20 = wwu_setup_draenei.1 # Umbrafen
        20 = wwu_setup_draenei.2 # Feralfen
        20 = wwu_setup_draenei.3 # Daggerfen
        20 = wwu_setup_draenei.4 # Kurenai
        20 = wwu_setup_draenei.5 # Dreghood
        20 = wwu_setup_draenei.6 # Wrekt
        20 = wwu_setup_draenei.7 # Murkblood
        20 = wwu_setup_draenei.8 # Windyreed
        20 = wwu_setup_human.1 # Blackthorn
        
        1000 = 0
    }
}
on_yearly_pulse_3 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_yearly_pulse_3 "
	}
    
    random_events = {
        50 = wwu_game_configuration.200 # Vanquisher Assignment
        
        1000 = 0
    }
}
on_yearly_pulse_4 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_yearly_pulse_4 "
	}
    
    # Ruler/Heir Death
    random_events = {
        1 = wwu_ruler.10 # Mortal Ruler - Death
        1 = wwu_ruler.11 # Mortal Heir - Death
        
        99 = 0
    }
}
on_yearly_pulse_5 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_yearly_pulse_5 "
	}
    
    # Ruler Change
    random_events = {
        1 = wwu_ruler.1 # Immortal Ruler - Growth
        1 = wwu_ruler.2 # Immortal Ruler - Regression
        
        # Pirate Ruler Death
        1 = wwu_pirate_ruler_death.1
        1 = wwu_pirate_ruler_death.2
        1 = wwu_pirate_ruler_death.3
        
        98 = 0
    }
}

# country random events
on_bi_yearly_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_bi_yearly_pulse "
	}
	
    # Building Management is for players only
    if = {
        limit = {
            ai = no
        }
        auto_build_effect = yes
        auto_destroy_effect = yes
    }
    
    # Events
	random_events = {
		# Trade Specific
		100 = trade.1
		100 = trade.2
		100 = trade.3
		100 = trade.4
		100 = trade.5
		100 = trade.6
		100 = trade.7
		100 = trade.8
		100 = trade.9
		100 = trade.10
		100 = trade.11
		100 = trade.12
        
		# Trade League Events
		100 = trade_league.1
		100 = trade_league.2
		100 = trade_league.3
		100 = trade_league.4
		100 = trade_league.7
		100 = trade_league.8
		100 = trade_league.9
		100 = trade_league.10
		100 = trade_league.11
		100 = trade_league.12
		100 = trade_league.13

		# Refoms, when having parliaments.
		100 = reforms.1
		100 = reforms.2
		100 = reforms.3
		100 = reforms.4

        # Tribes
		100 = wwu_tribes.1
		100 = wwu_tribes.2
		100 = wwu_tribes.3
		100 = wwu_tribes.4
		100 = wwu_tribes.5
		100 = wwu_tribes.6
		100 = wwu_tribes.7
		100 = wwu_tribes.8
		100 = wwu_tribes.13
		100 = wwu_tribes.14
		100 = wwu_tribes.17
		100 = wwu_tribes.19
		100 = wwu_tribes.20
		100 = wwu_tribes.21
		100 = wwu_tribes.22
		100 = wwu_tribes.23
		100 = wwu_tribes.24
        100 = 9202
        100 = 9203
        20  = 9204
        
		# Sailor events
		100 = sailor_event.1
		100 = sailor_event.2
		100 = sailor_event.3
		100 = sailor_event.4
		100 = sailor_event.5

		# Corruption Events
		100 = wwu_corruption.16
		100 = wwu_corruption.17
		100 = wwu_corruption.18
		100 = wwu_corruption.19
		100 = wwu_corruption.20

        # Arcane
        100 = wwu_arcane.2
        200 = wwu_arcane.3
        200 = wwu_arcane.4
        100 = wwu_arcane.5

		# Minority Expulsion Events
		100 = expel_minority_events.1
		100 = expel_minority_events.2
		100 = expel_minority_events.3
		100 = expel_minority_events.4
		100 = expel_minority_events.5
        
        # Civilization
        300 = wwu_civilization.2
        300 = wwu_civilization.3
        300 = wwu_civilization.4
        300 = wwu_civilization.5
        300 = wwu_civilization.6
        
        # Dynastic
        100 = wwu_dynastic.2
        100 = wwu_dynastic.3
        100 = wwu_dynastic.4
        50  = wwu_dynastic.5
        20  = wwu_dynastic.6
        20  = wwu_dynastic.7
        50  = wwu_dynastic.8
        20  = wwu_dynastic.9
        50  = wwu_dynastic.10
        100 = wwu_dynastic.11
        100 = wwu_dynastic.12
        20  = wwu_dynastic.13
        100 = wwu_dynastic.17
        100 = wwu_dynastic.18
        100 = wwu_dynastic.20
        100 = wwu_dynastic.21
        20  = wwu_dynastic.24
        100 = wwu_dynastic.25
        100 = wwu_dynastic.26
        20  = wwu_dynastic.27
        50  = wwu_dynastic.28
        20  = wwu_dynastic.29

		1250 = 0
	}
}

on_bi_yearly_pulse_2 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_bi_yearly_pulse_2 "
	}
    
	random_events = {
		100 = wwu_corruption.1
		100 = wwu_corruption.2
		100 = wwu_corruption.3
		100 = wwu_corruption.4
		100 = wwu_corruption.5
		100 = wwu_corruption.6
		100 = wwu_corruption.7
		100 = wwu_corruption.8
		100 = wwu_corruption.9
		100 = wwu_corruption.10
		200 = wwu_corruption.11
		200 = wwu_corruption.12
		200 = wwu_corruption.13
		200 = wwu_corruption.14
		200 = wwu_corruption.15
        
        # Fel
        100 = wwu_fel.10
        100 = wwu_fel.11
        100 = wwu_fel.12
        100 = wwu_fel.13
        
        # Fel - Legion Strength 100%
        200 = wwu_fel.20
        200 = wwu_fel.21
        
        # Elemental Attunement
        400 = wwu_elemental_attunement.10
        50 = wwu_elemental_attunement.11
        50 = wwu_elemental_attunement.12
        
        # Druidism
        100 = wwu_druidism.3
        
		4000 = 0
	}
}

on_bi_yearly_pulse_3 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_bi_yearly_pulse_3 "
	}
	
    #-----------------------
    # Magic Events
    #-----------------------
    events = {
        wwu_magic.11 # Accomplished Spellcaster
    }
    random_events = {
        # Magic Training
        100 = wwu_magic.1
        50 = wwu_magic.2
        50 = wwu_magic.3
        50 = wwu_magic.4
        100 = wwu_magic.5
        100 = wwu_magic.6
        100 = wwu_magic.7
        100 = wwu_magic.8
        100 = wwu_magic.9
        100 = wwu_magic.10
    }
}

on_bi_yearly_pulse_4 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_bi_yearly_pulse_4 "
	}
    
    random_events = {
        # Espionage
		100 = espionage_events.1
		100 = espionage_events.8
		100 = espionage_events.9
        
        # Minority Expulsion Events
		100 = expel_minority_events.1
		100 = expel_minority_events.2
		100 = expel_minority_events.3
		100 = expel_minority_events.4
		100 = expel_minority_events.5
        
        # Innovativeness
		100 = innovativeness_events.4
		100 = innovativeness_events.5
		100 = innovativeness_events.6
		100 = innovativeness_events.7
		100 = innovativeness_events.8
		100 = innovativeness_events.9
		100 = innovativeness_events.10
		100 = innovativeness_events.13
		100 = innovativeness_events.15
        
        # Mercenaries
		100 = mercs.3
		100 = mercs.4
		100 = mercs.8
		100 = mercs.11
		
		# Savage
		100 = random_savage.1
        
        # Professionalism
		100 = army_professionalism_events.4
		100 = army_professionalism_events.5
		75 = army_professionalism_events.6
		100 = army_professionalism_events.8
		100 = army_professionalism_events.9
		100 = army_professionalism_events.10
		100 = army_professionalism_events.11
		75 = army_professionalism_events.12
		100 = army_professionalism_events.13
		75 = army_professionalism_events.16

        # Estate Agenda
		1000 = estate_system.1

		2000 = 0
    }
}

on_bi_yearly_pulse_5 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_bi_yearly_pulse_5 "
	}
    
    random_events = {
        # Ruler Class Training
        100 = wwu_ruler_training.20
        100 = wwu_ruler_training.21
        100 = wwu_ruler_training.22
        100 = wwu_ruler_training.23
        100 = wwu_ruler_training.24
        100 = wwu_ruler_training.25
        100 = wwu_ruler_training.26
        100 = wwu_ruler_training.27
    }
}

# country random events
on_thri_yearly_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_thri_yearly_pulse "
	}
    
	random_events = {
		# Republics
        100 = republics.1
        100 = republics.2
        100 = republics.3
		100 = republics.4
		100 = republics.5
		100 = republics.6
		100 = republics.7
		100 = republics.8
		100 = republics.9
		100 = republics.10
		100 = republics.11
		100 = republics.12
		100 = republics.13
		100 = republics.14
		100 = republics.15
		100 = republics.16
		100 = republics.17
		100 = republics.18
		100 = republics.19
		100 = republics.20
		100 = republics.21
		100 = republics.22
		100 = republics.23
		100 = republics.24
		100 = republics.25
		100 = republics.26
		100 = republics.27
		100 = republics.28
		100 = republics.29
		100 = republics.30
		100 = republics.31
		100 = republics.32
		100 = republics.33
		100 = republics.34
		100 = republics.35
		100 = republics.36
		100 = republics.37
		100 = republics.38
		100 = republics.39
		100 = republics.40
		100 = republics.41
		100 = republics.42
		100 = republics.43

		# China
		75 = meritocracy_events.1
		75 = meritocracy_events.2
		75 = meritocracy_events.3
		75 = meritocracy_events.4
		75 = meritocracy_events.5
		
		2000 = 0
	}
}

on_thri_yearly_pulse_2 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_thri_yearly_pulse_2 "
	}
    
}

on_thri_yearly_pulse_3 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_thri_yearly_pulse_3 "
	}
    
	random_events = {
		# Subject Interactions
		50 = subject_interaction_events.1
		50 = subject_interaction_events.4
		50 = subject_interaction_events.5
		50 = subject_interaction_events.6
		50 = subject_interaction_events.7
		50 = subject_interaction_events.9
		50 = subject_interaction_events.11
		50 = subject_interaction_events.14
		50 = subject_interaction_events.15
		50 = subject_interaction_events.17
		50 = subject_interaction_events.18
		50 = subject_interaction_events.19
		50 = subject_interaction_events.20
		50 = subject_interaction_events.21
		50 = subject_interaction_events.22
		50 = subject_interaction_events.23
		50 = subject_interaction_events.24
		50 = subject_interaction_events.25
		50 = subject_interaction_events.26
		50 = subject_interaction_events.27
		50 = subject_interaction_events.29
		50 = subject_interaction_events.30
		50 = subject_interaction_events.31
		50 = subject_interaction_events.32
		50 = subject_interaction_events.34
		50 = subject_interaction_events.35
		50 = subject_interaction_events.36
		50 = subject_interaction_events.38
		50 = subject_interaction_events.40
		50 = subject_interaction_events.43
		75 = tributary_events.1
		75 = tributary_events.2
		75 = tributary_events.3
		75 = tributary_events.4
		75 = tributary_events.5
		75 = tributary_events.6
		75 = tributary_events.7
		75 = tributary_events.8
		75 = tributary_events.9
		75 = tributary_events.10
		75 = tributary_events.13
		75 = tributary_events.16
		75 = tributary_events.17
		75 = tributary_events.18
		75 = tributary_events.19
		75 = tributary_events.23
		75 = tributary_events.24
		75 = tributary_events.26
		75 = tributary_events.25
		75 = tributary_events.27
		75 = tributary_events.30

		1000 = 0
	}
}

on_thri_yearly_pulse_4 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_thri_yearly_pulse_4 "
	}
}

on_four_year_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_four_year_pulse "
	}
    
	random_events = {
		# Colonial Nations
		100 = colonial_nation.1
		100 = colonial_nation.4
		100 = colonial_nation.10
		100 = colonial_nation.12
		100 = colonial_nation.14
		100 = colonial_nation.100
		100 = colonial_nation.102
		100 = colonial_nation.104
		100 = colonial_nation.106
		100 = colonial_nation.108
		100 = colonial_nation.110
		100 = colonial_nation.112
		100 = colonial_nation.114
		100 = colonial_nation.116
		100 = colonial_nation.118
		100 = colonial_nation.120
		100 = colonial_nation.122
		100 = colonial_nation.124
		100 = colonial_nation.126
		100 = colonial_nation.128
		100 = colonial_nation.130
		100 = colonial_nation.132
		100 = colonial_nation.134
		100 = colonial_nation.136
		10 = colonial_nation.140
		10 = colonial_nation.142
		10 = colonial_nation.144
		10 = colonial_nation.146
		10 = colonial_nation.148
		10 = colonial_nation.150
		10 = colonial_nation.152
		10 = colonial_nation.154
		10 = colonial_nation.156
		10 = colonial_nation.158
		10 = colonial_nation.160
		10 = colonial_nation.162
		10 = colonial_nation.164
		10 = colonial_nation.166
		10 = colonial_nation.168
		10 = colonial_nation.170
		10 = colonial_nation.172
		10 = colonial_nation.174
		10 = colonial_nation.176

		# Pirate Factions
		100 = pirates.10
		100 = pirates.11
		100 = pirates.12
		100 = pirates.13
		100 = pirates.14
		100 = pirates.15
		100 = pirates.16
		100 = pirates.17
		100 = pirates.18
		100 = pirates.19
        
        # Republican Dictatorship
		100 = republican_dictatorship.1
		100 = republican_dictatorship.2
		100 = republican_dictatorship.3
		100 = republican_dictatorship.4
		100 = republican_dictatorship.5
		100 = republican_dictatorship.6
		100 = republican_dictatorship.7
		100 = republican_dictatorship.8
        
        # Elune
        100 = wwu_elune.1
        100 = wwu_elune.2
        
        # Druidism
        100 = wwu_druidism.1
        100 = wwu_druidism.2
        100 = wwu_druidism.5
        100 = wwu_druidism.6
        100 = wwu_druidism.7
        100 = wwu_druidism.8
        100 = wwu_druidism.9
        100 = wwu_druidism.10
        
        # Celestials
        100 = wwu_celestials.1
        100 = wwu_celestials.2
        100 = wwu_celestials.3
        100 = wwu_celestials.4
        
        # Yaungol
        100 = wwu_yaungol.1
        100 = wwu_yaungol.2
        100 = wwu_yaungol.4
        
        # Local Province Flavour
        500 = wwu_local_province_flavour.100
        
        1000 = 0
	}
}

on_four_year_pulse_2 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_four_year_pulse_2 "
	}
    
    # Story
    events = {
        wwu_worgen.1 # Archmage's Offer
        wwu_thrall.1 # Discovery of Go'el
        silver_hand.1 # Order of the Silver Hand
    }
    
    random_events = {
        # Twilight Infiltration
        100 = wwu_twilight_hammer.1
        100 = wwu_twilight_hammer.2
        100 = wwu_twilight_hammer.3
        100 = wwu_twilight_hammer.10
        100 = wwu_twilight_hammer.20
        
        # First War
        500 = first_war.1
        500 = first_war.2
        
        # Second War
        500 = the_second_war.1
        500 = the_second_war.2
        500 = the_second_war.3
        500 = the_second_war.5
        
        1000 = 0
    }
}

on_four_year_pulse_3 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_four_year_pulse_3 "
	}
    
    random_events = {
		# Random Events
		100 = wwu_local_country_flavour.1
		100 = wwu_local_country_flavour.2
		100 = wwu_local_country_flavour.3
		100 = wwu_local_country_flavour.4
		100 = wwu_local_country_flavour.5
		100 = wwu_local_country_flavour.6
		100 = wwu_local_country_flavour.7
		100 = wwu_local_country_flavour.8
		100 = wwu_local_country_flavour.9
		100 = wwu_local_country_flavour.10
		100 = wwu_local_country_flavour.11
		100 = wwu_local_country_flavour.12
		100 = wwu_local_country_flavour.13
		100 = wwu_local_country_flavour.14
		100 = wwu_local_country_flavour.15
		100 = wwu_local_country_flavour.16
		100 = wwu_local_country_flavour.17
		100 = wwu_local_country_flavour.18
		100 = wwu_local_country_flavour.19
		100 = wwu_local_country_flavour.20
		100 = wwu_local_country_flavour.21
		100 = wwu_local_country_flavour.22
		100 = wwu_local_country_flavour.23
		100 = wwu_local_country_flavour.24
		100 = wwu_local_country_flavour.25
		100 = wwu_local_country_flavour.26
		100 = wwu_local_country_flavour.27
		100 = wwu_local_country_flavour.28
		100 = wwu_local_country_flavour.29
		100 = wwu_local_country_flavour.30
		100 = wwu_local_country_flavour.31
		100 = wwu_local_country_flavour.32
		100 = wwu_local_country_flavour.33
		100 = wwu_local_country_flavour.34
		100 = wwu_local_country_flavour.35
		100 = wwu_local_country_flavour.36
		100 = wwu_local_country_flavour.37
		100 = wwu_local_country_flavour.38
		100 = wwu_local_country_flavour.39
		100 = wwu_local_country_flavour.40
		100 = wwu_local_country_flavour.41
		100 = wwu_local_country_flavour.42
		100 = wwu_local_country_flavour.43
		100 = wwu_local_country_flavour.44
		100 = wwu_local_country_flavour.45
		100 = wwu_local_country_flavour.46
		100 = wwu_local_country_flavour.47
		100 = wwu_local_country_flavour.48
		100 = wwu_local_country_flavour.49
		100 = wwu_local_country_flavour.50
		100 = wwu_local_country_flavour.51
		100 = wwu_local_country_flavour.52
		100 = wwu_local_country_flavour.53
		100 = wwu_local_country_flavour.54
		100 = wwu_local_country_flavour.55
		100 = wwu_local_country_flavour.56
		100 = wwu_local_country_flavour.57
		100 = wwu_local_country_flavour.58
		100 = wwu_local_country_flavour.59
		100 = wwu_local_country_flavour.60
		100 = wwu_local_country_flavour.61
		100 = wwu_local_country_flavour.62
		100 = wwu_local_country_flavour.63
		100 = wwu_local_country_flavour.64
		100 = wwu_local_country_flavour.65
		100 = wwu_local_country_flavour.66
		100 = wwu_local_country_flavour.67
        100 = wwu_local_country_flavour.68
        100 = wwu_local_country_flavour.69
        100 = wwu_local_country_flavour.70
        100 = wwu_local_country_flavour.71
        100 = wwu_local_country_flavour.72
        100 = wwu_local_country_flavour.80
        100 = wwu_local_country_flavour.81
        100 = wwu_local_country_flavour.82
        100 = wwu_local_country_flavour.83
        100 = wwu_local_country_flavour.84
        100 = wwu_local_country_flavour.85
        100 = wwu_local_country_flavour.86
        100 = wwu_local_country_flavour.87
        100 = wwu_local_country_flavour.88

		2000 = 0
    }
}

on_four_year_pulse_4 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_four_year_pulse_4 "
	}
}

on_five_year_pulse = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_five_year_pulse "
	}
    
    events = {
        # Government
        wwu_government.14 # Organisational Focus
        wwu_government.16 # Warsong!
        
        # Estates
        estate_system.3
        
        # Arcane
        wwu_arcane.1
        
        # Kel Thuzad
        wwu_kel_thuzad.4
        wwu_kel_thuzad.5
    }
    
    random_events = {
		# Aristocracy 		13  (8g 5b)
		100 = ideagroups.100
		100 = ideagroups.101
		100 = ideagroups.102
		100 = ideagroups.103
		100 = ideagroups.104
		100 = ideagroups.105
		100 = ideagroups.106
		100 = ideagroups.107
		100 = ideagroups.108
		100 = ideagroups.109
		100 = ideagroups.110
		100 = ideagroups.111
		100 = ideagroups.112


		# Plutocracy 		19 (12g 7b)
		100 = ideagroups.200
		100 = ideagroups.201
		100 = ideagroups.202
		100 = ideagroups.203
		100 = ideagroups.204
		100 = ideagroups.205
		100 = ideagroups.206
		100 = ideagroups.207
		100 = ideagroups.208
		100 = ideagroups.209
		100 = ideagroups.210
		100 = ideagroups.211
		100 = ideagroups.212
		100 = ideagroups.213
		100 = ideagroups.214
		100 = ideagroups.215
		100 = ideagroups.216
		100 = ideagroups.217
		100 = ideagroups.218

		# Innovativenes		11 (7g 4b)
		100 = ideagroups.300
		100 = ideagroups.301
		100 = ideagroups.302
		100 = ideagroups.303
		100 = ideagroups.304
		100 = ideagroups.305
		100 = ideagroups.307
		100 = ideagroups.308
		100 = ideagroups.309
		100 = ideagroups.310

		# Religious		18 (11g 7b)
		100 = ideagroups.400
		100 = ideagroups.401
		100 = ideagroups.402
		100 = ideagroups.403
		100 = ideagroups.404
		100 = ideagroups.405
		100 = ideagroups.407
		100 = ideagroups.408
		100 = ideagroups.409
		100 = ideagroups.411
		100 = ideagroups.412
		100 = ideagroups.413
		100 = ideagroups.414
		100 = ideagroups.415
		100 = ideagroups.416
		100 = ideagroups.417


		# Spy			9 (6g 3b)
		100 = ideagroups.500
		100 = ideagroups.501
		100 = ideagroups.502
		100 = ideagroups.503
		100 = ideagroups.504
		100 = ideagroups.505
		100 = ideagroups.506
		100 = ideagroups.507
		100 = ideagroups.508


		# Diplomatic		9 (6g 3b)
		100 = ideagroups.600
		100 = ideagroups.601
		100 = ideagroups.602
		100 = ideagroups.603
		100 = ideagroups.604
		100 = ideagroups.605
		100 = ideagroups.606
		100 = ideagroups.607
		100 = ideagroups.608


		# Offensive 		14 (9g 5b)
		100 = ideagroups.700
		100 = ideagroups.701
		100 = ideagroups.702
		100 = ideagroups.703
		100 = ideagroups.704
		100 = ideagroups.705
		100 = ideagroups.706
		100 = ideagroups.707
		100 = ideagroups.708
		100 = ideagroups.709
		100 = ideagroups.710
		100 = ideagroups.711
		100 = ideagroups.712
		100 = ideagroups.713


		# Defensive		11 (5g 6b)
		100 = ideagroups.800
		100 = ideagroups.801
		100 = ideagroups.802
		100 = ideagroups.803
		100 = ideagroups.804
		100 = ideagroups.805
		100 = ideagroups.806
		100 = ideagroups.807
		100 = ideagroups.808
		100 = ideagroups.809
		100 = ideagroups.810
		100 = ideagroups.811
		100 = ideagroups.812
		100 = ideagroups.813
		100 = ideagroups.814
		100 = ideagroups.815


		# Trade			6 (7g 4b)
		100 = ideagroups.900
		100 = ideagroups.901
		100 = ideagroups.902
		100 = ideagroups.903
		100 = ideagroups.904
		100 = ideagroups.905
		100 = ideagroups.906
		100 = ideagroups.907
		100 = ideagroups.908
		100 = ideagroups.909
		100 = ideagroups.910

		# Maritime			22 (14g 8b)
		100 = ideagroups.1000
		100 = ideagroups.1001
		100 = ideagroups.1002
		100 = ideagroups.1003
		100 = ideagroups.1004
		100 = ideagroups.1005
		100 = ideagroups.1006
		100 = ideagroups.1007
		100 = ideagroups.1008
		100 = ideagroups.1009
		100 = ideagroups.1010
		100 = ideagroups.1011
		100 = ideagroups.1012
		100 = ideagroups.1013
		100 = ideagroups.1014
		100 = ideagroups.1015
		100 = ideagroups.1016
		100 = ideagroups.1017
		100 = ideagroups.1018
		100 = ideagroups.1019
		100 = ideagroups.1020
		100 = ideagroups.1021

		# Economic		11 (7g 4b)
		100 = ideagroups.1100
		100 = ideagroups.1101
		100 = ideagroups.1102
		100 = ideagroups.1103
		100 = ideagroups.1104
		100 = ideagroups.1105
		100 = ideagroups.1106
		100 = ideagroups.1107
		100 = ideagroups.1108
		100 = ideagroups.1109
		100 = ideagroups.1110

		# Exploration		11 (7g 4b)
		100 = ideagroups.1200
		100 = ideagroups.1201
		100 = ideagroups.1202
		100 = ideagroups.1203
		100 = ideagroups.1204
		100 = ideagroups.1205
		100 = ideagroups.1206
		100 = ideagroups.1209
		100 = ideagroups.1210

		# Quality		11 (7g 4b)
		100 = ideagroups.1300
		100 = ideagroups.1301
		100 = ideagroups.1302
		100 = ideagroups.1303
		100 = ideagroups.1304
		100 = ideagroups.1305
		100 = ideagroups.1306
		100 = ideagroups.1307
		100 = ideagroups.1308
		100 = ideagroups.1309
		100 = ideagroups.1310

		# Quantity		11 (7g 4b)
		100 = ideagroups.1400
		100 = ideagroups.1401
		100 = ideagroups.1402
		100 = ideagroups.1403
		100 = ideagroups.1404
		100 = ideagroups.1405
		100 = ideagroups.1406
		100 = ideagroups.1407
		100 = ideagroups.1408
		100 = ideagroups.1409
		100 = ideagroups.1410


		# Expansion		11 (7g 4b)
		100 = ideagroups.1500
		100 = ideagroups.1501
		100 = ideagroups.1502
		100 = ideagroups.1503
		100 = ideagroups.1504
		100 = ideagroups.1505
		100 = ideagroups.1506
		100 = ideagroups.1507
		100 = ideagroups.1508
		100 = ideagroups.1509
		100 = ideagroups.1510

		# Administrative	3 (1g 2b)
		100 = ideagroups.1600
		100 = ideagroups.1601
		100 = ideagroups.1602
		100 = ideagroups.1603
		100 = ideagroups.1604
		100 = ideagroups.1605
		100 = ideagroups.1606
		100 = ideagroups.1607
		100 = ideagroups.1608
		100 = ideagroups.1609
		100 = ideagroups.1610

		# Naval		11 (7g 4b)
		100 = ideagroups.1700
		100 = ideagroups.1701
		100 = ideagroups.1702
		100 = ideagroups.1703
		100 = ideagroups.1704
		100 = ideagroups.1705
		100 = ideagroups.1706
		100 = ideagroups.1707
		100 = ideagroups.1708
		100 = ideagroups.1709
		100 = ideagroups.1710

		# Influence		11 (7g 4b)
		100 = ideagroups.1800
		100 = ideagroups.1801
		100 = ideagroups.1802
		100 = ideagroups.1803
		100 = ideagroups.1804
		100 = ideagroups.1805
		100 = ideagroups.1806
		100 = ideagroups.1807
		100 = ideagroups.1808
		100 = ideagroups.1809
		100 = ideagroups.1810

		# Humanist		11 (7g 4b)
		100 = ideagroups.1900
		100 = ideagroups.1901
		100 = ideagroups.1902
		100 = ideagroups.1903
		100 = ideagroups.1904
		100 = ideagroups.1905
		100 = ideagroups.1906
		100 = ideagroups.1907
		100 = ideagroups.1908
		100 = ideagroups.1909
		100 = ideagroups.1910
        
        # Additional Ideagroups
        100 = wwu_ideagroups.9
        100 = wwu_ideagroups.10
        300 = wwu_ideagroups.12
        100 = wwu_ideagroups.13
        
        # Union
        100 = 7001
        100 = 7002
        100 = 7003
        100 = 7004
        100 = 7005
        
        # Uncivilized
        100 = wwu_uncivilized.1
        
        # Privateers
        100 = privateers.4
        100 = privateers.5
        100 = privateers.6
        100 = privateers.7
        100 = privateers.9
        100 = privateers.11
        100 = privateers.12
        
        # Personality
        100 = mf_positive_personality.1
        100 = mf_negative_personality.1
        100 = mf_negative_personality.2
        100 = mf_negative_personality.3
        
        # Monsoon
        100 = monsoon_events.1
        100 = monsoon_events.2
        100 = monsoon_events.3
        100 = monsoon_events.4
        100 = monsoon_events.5
        
        # Military Reform
        100 = wwu_military_reform.1
        
        # Mercantilism
        100 = mercantilism_events.1
        100 = mercantilism_events.2
        100 = mercantilism_events.3
        100 = mercantilism_events.4
        100 = mercantilism_events.5
        100 = mercantilism_events.6
        100 = mercantilism_events.7
        100 = mercantilism_events.8
        100 = mercantilism_events.9
        100 = mercantilism_events.10
        
        # Great Men
        100 = wwu_great_men.1
        100 = wwu_great_men.2
        100 = wwu_great_men.3
        100 = wwu_great_men.4
        100 = wwu_great_men.5
        100 = wwu_great_men.6
        100 = wwu_great_men.7
        100 = wwu_great_men.8
        100 = wwu_great_men.9
        100 = wwu_great_men.10
        100 = wwu_great_men.11
        100 = wwu_great_men.12
        100 = wwu_great_men.13
        100 = wwu_great_men.14
        100 = wwu_great_men.15
        100 = wwu_great_men.16
        100 = wwu_great_men.17
        100 = wwu_great_men.18
        100 = wwu_great_men.19
        100 = wwu_great_men.20
        100 = wwu_great_men.21
        
		1000 = 0
	}
}

on_five_year_pulse_2 = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_five_year_pulse_2 "
	}
    
    random_events = {
        # Estate
        30 = wwu_estate_crownland.1 # Estate Demands Influence
        30 = wwu_estate_crownland.2 # Estate Seizes Influence
        
        # Government
        100 = wwu_government.4
        100 = wwu_government.6
        
        # Artifacts
        10 = wwu_artifact_unlocks.1
        10 = wwu_artifact_unlocks.2
        10 = wwu_artifact_unlocks.4
        10 = wwu_artifact_unlocks.5
        10 = wwu_artifact_unlocks.6
        
        # Titan Corruption
        100 = wwu_titan_corruption.1
        100 = wwu_titan_corruption.2
        
        # Scourge Rebellion
        500 = wwu_scourge_flavour.1
        
        # Pandaren
        500 = wwu_pandaren.1
        500 = wwu_pandaren.2
        500 = wwu_pandaren.3
        500 = wwu_pandaren.4
        
        # Old Gods
        300 = wwu_old_gods.10
        
        # Nazjatar
        100 = wwu_nazjatar.2
        
        # Murloc
        100 = wwu_murloc.1
        100 = wwu_murloc.2
        100 = wwu_murloc.3
        
        # Mantid
        100 = wwu_mantid.1
        100 = wwu_mantid.5
        100 = wwu_mantid.6
        100 = wwu_mantid.8
        100 = wwu_mantid.9
        
        # Loa
        100 = wwu_loa.10
        100 = wwu_loa.11
        100 = wwu_loa.12
        100 = wwu_loa.13
        100 = wwu_loa.14
        100 = wwu_loa.15
        100 = wwu_loa.16
        100 = wwu_loa.17
        100 = wwu_loa.18
        100 = wwu_loa.19
        100 = wwu_loa.20
        
        # Kul Tiras
        100 = wwu_kul_tiras.10
        100 = wwu_kul_tiras.11
        100 = wwu_kul_tiras.12
        100 = wwu_kul_tiras.13
        
        # Gnoll
        100 = gnoll.1
        100 = gnoll.2
        100 = gnoll.3
        
        # Fallen Arakkoa
        100 = wwu_fallen_arakkoa.1
        100 = wwu_fallen_arakkoa.2
        100 = wwu_fallen_arakkoa.3
        100 = wwu_fallen_arakkoa.4
        100 = wwu_fallen_arakkoa.5
        100 = wwu_fallen_arakkoa.6
        100 = wwu_fallen_arakkoa.7
        100 = wwu_fallen_arakkoa.8
        
        # Aqir
        500 = wwu_aqir.1
        500 = wwu_aqir.2
        100 = wwu_aqir.3
        100 = wwu_aqir.4
        100 = wwu_aqir.5
        100 = wwu_aqir.6
        100 = wwu_aqir.7
        500 = wwu_aqir.8
        
        # Ancestral Shamanism
        100 = wwu_shamanism.2
        100 = wwu_shamanism.3
        
        # Drakkari
        100 = wwu_drakkari.10
        100 = wwu_drakkari.11
        100 = wwu_drakkari.12
        100 = wwu_drakkari.13
        100 = wwu_drakkari.14
        100 = wwu_drakkari.15
        100 = wwu_drakkari.16
        100 = wwu_drakkari.17
        
        # Elune
        100 = wwu_elune.4
        100 = wwu_elune.5
        100 = wwu_elune.6
        100 = wwu_elune.7
        100 = wwu_elune.8
        100 = wwu_elune.9
        100 = wwu_elune.10
        100 = wwu_elune.11
        100 = wwu_elune.12
        100 = wwu_elune.13
        100 = wwu_elune.14
        
        # Deep Mother
        100 = wwu_deep_mother.1
        100 = wwu_deep_mother.2
        100 = wwu_deep_mother.3
        100 = wwu_deep_mother.4
        10  = wwu_deep_mother.5
        
        # Grand Warlock
        100 = wwu_grand_warlock.1
        100 = wwu_grand_warlock.2
        100 = wwu_grand_warlock.3
        
        # Candle
        100 = wwu_candle_flavour.1
        100 = wwu_candle_flavour.2
        100 = wwu_candle_flavour.3
        100 = wwu_candle_flavour.4
        100 = wwu_candle_flavour.5
        
        # Tuskarr Idolatry
        100 = wwu_tuskarr_idolatry.1
        100 = wwu_tuskarr_idolatry.2
        100 = wwu_tuskarr_idolatry.3
        100 = wwu_tuskarr_idolatry.4
        100 = wwu_tuskarr_idolatry.5
        100 = wwu_tuskarr_idolatry.6
        100 = wwu_tuskarr_idolatry.7
        
        # Emerald Nightmare
        100 = wwu_emerald_nightmare.2
        
        1000 = 0
    }
}

on_five_year_pulse_3 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_five_year_pulse_3 "
	}
    
	random_events = {
        # Emerald Dream
        100 = wwu_emerald_dream.1
        100 = wwu_emerald_dream.2
        100 = wwu_emerald_dream.3
        100 = wwu_emerald_dream.4
        100 = wwu_emerald_dream.5
        100 = wwu_emerald_dream.6
        100 = wwu_emerald_dream.7
        100 = wwu_emerald_dream.8
        
        100 = wwu_naga.1
        100 = wwu_naga.2
        100 = wwu_naga.3
        
        # Government
        100 = wwu_government.9 # Decadence
        100 = wwu_government.10 # Heir Apparent
        
        # Monument Research
        100 = wwu_monument_research.2
        100 = wwu_monument_research.3
        100 = wwu_monument_research.4
        
        # Distant Claims
        300 = wwu_distant_claims.1
        300 = wwu_distant_claims.2
        300 = wwu_distant_claims.3
        300 = wwu_distant_claims.4
        300 = wwu_distant_claims.5
        
        # Kel Thuzad
        200 = wwu_kel_thuzad.3
        
        # Guilds
        10 = wwu_guilds.1
        10 = wwu_guilds.2
        10 = wwu_guilds.3
        10 = wwu_guilds.4
        10 = wwu_guilds.5
        
		1000 = 0
	}
}

on_five_year_pulse_4 = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_five_year_pulse_4 "
	}
    
    #fail-safe if for whatever reason these flags stay after being used in events
	if = {
		limit = {
			had_country_flag = {
				flag = advisor_events_adm
				days = 720
			}
		}
		clr_country_flag = advisor_events_adm
	}
	if = {
		limit = {
			had_country_flag = {
				flag = advisor_events_dip
				days = 720
			}
		}
		clr_country_flag = advisor_events_dip
	}
	if = {
		limit = {
			had_country_flag = {
				flag = advisor_events_mil
				days = 720
			}
		}
		clr_country_flag = advisor_events_mil
	}
    
    events = {
        # AI
        wwu_ai.2
        wwu_scourge.201
    }
    
    random_events = {
        # Magic
        100 = wwu_magic.13
        100 = wwu_magic.14
        100 = wwu_magic.15
        100 = wwu_magic.17
        100 = wwu_magic.18
        100 = wwu_magic.19
        
        # AI
        200 = wwu_ai.1
        
        1000 = 0
    }
}

# El Dorado
on_explore_coast = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_explore_coast "
	}
    
    random_events = {
		10 = wwu_exploration.1
		10 = wwu_exploration.2
		10 = wwu_exploration.4
		10 = wwu_exploration.6
		10 = wwu_exploration.7
		10 = wwu_exploration.9
		10 = wwu_exploration.10
		10 = wwu_exploration.11
		10 = wwu_exploration.12
		10 = wwu_exploration.14
		10 = wwu_exploration.15
        100 = 0
	}
}

on_conquistador_empty = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_conquistador_empty "
	}
}

on_conquistador_native = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_conquistador_native "
	}
}

on_buy_religious_reform = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_buy_religious_reform "
	}
}

on_circumnavigation = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_circumnavigation "
	}
    
    events = {
		wwu_exploration.100# Initial Circumnavigation
        wwu_exploration.101 # Repeat Circumnavigation
    }
}

on_become_free_city = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_become_free_city "
	}
    
	events = {
        
	}
}

on_remove_free_city = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_remove_free_city "
	}
    
	events = {
        
	}
}

on_revoke_estate_land_ai = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_revoke_estate_land_ai "
	} #AI can't handle the rebels atm or perform a gradual revoke, sorry
    
	add_province_modifier = {
		name = revoked_estate_modifier
		duration = 5475 #15 years
	}
}

on_revoke_estate_land = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_revoke_estate_land "
	}
    
	add_province_modifier = {
		name = revoked_estate_modifier
		duration = 5475 #15 years
	}
}

on_revoke_estate_land_ai_post = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_revoke_estate_land_ai_post "
	}
    
	add_local_autonomy = 25
}
on_revoke_estate_land_post = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_revoke_estate_land_post "
	}
    
	add_local_autonomy = 25
}

on_grant_estate_land = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_grant_estate_land "
	}
    
	if = {
		limit = {
			has_province_modifier = revoked_estate_modifier
		}
		remove_province_modifier = revoked_estate_modifier
	}
}

on_death_has_harem = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_death_has_harem "
	}
}

on_select_heir_from_harem = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_select_heir_from_harem "
	}
}

on_fetishist_cult_change = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_fetishist_cult_change "
	}
}

# country
on_gain_great_power_status = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_gain_great_power_status "
	}
    
	if = {
		limit = {
			NOT = { has_country_flag = became_great_power_flag }
		}
		set_country_flag = became_great_power_flag
	}
}

# country
on_lose_great_power_status = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_lose_great_power_status "
	}
}

# province
on_province_religion_converted = {
	owner = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [Root.GetName], [This.GetName]: on_province_religion_converted "
        }
    }
    
	owner = {
		change_variable = {
			which = religions_converted
			value = 1
		}
	}
    
    # COF: Centres of Fanaticism
    if = {
        limit = {
            has_province_modifier = cof_cthun
        }
        remove_province_modifier = cof_cthun
    }
    if = {
        limit = {
            has_province_modifier = cof_nzoth
        }
        remove_province_modifier = cof_nzoth
    }
    if = {
        limit = {
            has_province_modifier = cof_yogg_saron
        }
        remove_province_modifier = cof_yogg_saron
    }
    if = {
        limit = {
            has_province_modifier = cof_yshaarj
        }
        remove_province_modifier = cof_yshaarj
    }
    if = {
        limit = {
            has_province_modifier = cof_sha
        }
        remove_province_modifier = cof_sha
    }
    if = {
        limit = {
            has_province_modifier = cof_twilight
        }
        remove_province_modifier = cof_twilight
    }
    if = {
        limit = {
            has_province_modifier = cof_nightmare
        }
        remove_province_modifier = cof_nightmare
    }
    
    # Remove the Sunfury world debuff in a province if it is converted to Fel
    if = {
        limit = {
            has_province_modifier = mission_burning_legion_hegemony
            religion = fel
        }
        remove_province_modifier = mission_burning_legion_hegemony
    }
    
    on_province_religion_converted_effect = yes
    on_province_religion_converted_estate_privileges_effect = yes
}

on_province_religion_changed = {
    owner = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [Root.GetName], [This.GetName]: on_province_religion_changed "
        }
    }
}

# province
on_province_culture_converted = {
	owner = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [Root.GetName], [This.GetName]: on_province_culture_converted "
        }
    }
    
	owner = {
		change_variable = {
			which = cultures_converted
			value = 1
		}
	}
	
	on_province_culture_converted_effect = yes
}

on_province_culture_changed = {
    owner = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [Root.GetName], [This.GetName]: on_province_culture_changed "
        }
    }
}

# THIS = Province, FROM = Country who Propogated
on_convert_by_trade_policy = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_convert_by_trade_policy "
	}
}

# province
# FROM = old owner
on_province_owner_change = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_province_owner_change "
	}
    
	owner = {
		change_variable = {
			which = provinces_gained
			value = 1
		}
	}
    
    update_government_reforms_on_province_change = yes
    remove_terrain_affinity = yes
    
    on_province_owner_change_effect = yes
    on_province_owner_change_estate_privileges_effect = yes
    on_province_owner_change_update_goods_production = yes
    
    # Nordrassil - Clear timer if the province is lost during the burning
    if = {
        limit = {
            province_id = 1334
            FROM = {
                has_country_flag = burning_nordrassil_timer
            }
        }
        
        FROM = { 
            clr_country_flag = burning_nordrassil_timer
            remove_country_modifier = burning_nordrassil
        }
        clr_province_flag = nordrassil_province_being_burnt
    }
    # Teldrassil - Clear timer if the province is lost during the burning
    if = {
        limit = {
            province_id = 1073
            FROM = {
                has_country_flag = burning_teldrassil_timer
            }
        }
        
        FROM = { 
            clr_country_flag = burning_teldrassil_timer
            remove_country_modifier = burning_teldrassil
        }
        clr_province_flag = teldrassil_province_being_burnt
    }
}

# country
on_parliament_debate_reset = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_parliament_debate_reset "
	}
}

# country
on_parliament_seat_given = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_parliament_seat_given "
	}
}

# country
on_parliament_seat_lost = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_parliament_seat_lost "
	}
}

# country
on_parliament_debate_failed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_parliament_debate_failed "
	}
}

# country
on_parliament_debate_succeeded = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_parliament_debate_succeeded "
	}
}

# Harmony
on_harmonized_light_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_light_group "
	}
    
    events = {
        wwu_harmonization.1
    }
}
on_harmonized_disorder_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_disorder_group "
	}
    
    events = {
        wwu_harmonization.2
    }
}
on_harmonized_life_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_life_group "
	}
    
    events = {
        wwu_harmonization.4
    }
}
on_harmonized_death_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_death_group "
	}
    
    events = {
        wwu_harmonization.7
    }
}
on_harmonized_shadow_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_shadow_group "
	}
    
    events = {
        wwu_harmonization.5
    }
}
on_harmonized_elemental_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_elemental_group "
	}
    
    events = {
        wwu_harmonization.3
    }
}
on_harmonized_philosophy_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_philosophy_group "
	}
    
    events = {
        wwu_harmonization.6
    }
}
on_harmonized_azerothian_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_azerothian_group "
	}
    
    events = {
        wwu_harmonization.8
    }
}
on_harmonized_draenorian_group = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_draenorian_group "
	}
    
    events = {
        wwu_harmonization.9
    }
}
on_harmonized_arcane = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_arcane "
	}
    
    events = {
        wwu_harmonization.20
    }
}
on_harmonized_titan_worship = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_titan_worship "
	}
    
    events = {
        wwu_harmonization.21
    }
}
on_harmonized_corrupt_titan_worship = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_corrupt_titan_worship "
	}
    
    events = {
        wwu_harmonization.22
    }
}
on_harmonized_mystery_of_the_makers = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_mystery_of_the_makers "
	}
    
    events = {
        wwu_harmonization.23
    }
}
on_harmonized_corrupt_dragon_aspect = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_corrupt_dragon_aspect "
	}
    
    events = {
        wwu_harmonization.24
    }
}
on_harmonized_crystal = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_harmonized_corrupt_dragon_aspect "
	}
    
    events = {
        wwu_harmonization.25
    }
}

# province
on_consecrate_patriarch = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_consecrate_patriarch "
	}
}

# country. from = overlord
on_accept_tribute = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_accept_tribute "
	}
}

# country. from = overlord
on_refuse_tribute = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_refuse_tribute "
	}
}

# country
on_leader_recruited = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_leader_recruited "
	}
}

# country
on_general_recruited = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_general_recruited "
	}
    
	add_army_professionalism = 0.02
    
    if = {
        limit = {
            has_idea = wwu_innovation_ideas_7
        }
        
        add_army_professionalism = 0.01
    }
}

# country
on_admiral_recruited = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_admiral_recruited "
	}
    
    if = {
		limit = { has_country_flag = admirals_give_army_professionalism }
		add_army_professionalism = 0.002
        
        if = {
            limit = {
                has_idea = wwu_innovation_ideas_7
            }
            
            add_army_professionalism = 0.01
        }
	}
}

# country
on_conquistador_recruited = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_conquistador_recruited "
	}
}

# country
on_explorer_recruited = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_explorer_recruited "
	}
}

# THIS = Province, FROM = Country
on_regiment_recruited = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_regiment_recruited "
	}

}

# THIS = Province, FROM = Country
on_mercenary_recruited = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_mercenary_recruited "
	}
    
	FROM = {
        if = {
            limit = {
                has_idea = wwu_mercenary_army_ideas_1
            }
            add_army_professionalism = 0.01
        }
	}
}

# THIS = One province in the state
on_add_pasha = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_add_pasha "
	}
}

# THIS = One province in the state
on_remove_pasha = {
	hidden_effect = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [Root.GetName]: on_remove_pasha "
        }
        
		owner = {
			save_event_target_as = province_owner
		}
		remove_province_modifier = pasha_removed_modifier
	}

	area = {
		limit = { owned_by = event_target:province_owner }
		add_or_extend_province_modifier_effect = { MODIFIER = pasha_removed_modifier DURATION = 3650 }
	}
}

# THIS = Province
on_janissaries_raised = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_janissaries_raised "
	}
}

# THIS = Province
on_cawa_raised = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_cawa_raised "
	}
    
}

on_carolean_raised = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_carolean_raised "
	}
    
}

on_hussars_raised = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hussars_raised "
	}
    
}

on_revolutionary_guard_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_revolutionary_guard_raised "
	}
}

on_banner_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_banner_raised "
	}
}

on_cossack_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_cossack_raised "
	}
}

on_marine_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_marine_raised "
	}
}

on_rajput_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_rajput_raised "
	}
}

on_streltsy_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_streltsy_raised "
	}
}

on_tercio_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_tercio_raised "
	}
}

on_musketeer_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_musketeer_raised "
	}
}

on_samurai_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_samurai_raised "
	}
}

on_geobukseon_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_geobukseon_raised "
	}
}

on_man_of_war_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_man_of_war_raised "
	}
}

on_galleon_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_galleon_raised "
	}
}

on_galleass_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_galleass_raised "
	}
}

on_caravel_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_caravel_raised "
	}
}

on_voc_indiamen_raised = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_voc_indiamen_raised "
	}
}

on_hre_reform_passed = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_hre_reform_passed "
	}
}

on_mandate_reform_passed = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_mandate_reform_passed "
	}
}

on_reform_enacted = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_reform_enacted "
	}
}

on_reform_changed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_reform_changed "
	}
}

on_trade_company_investment = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_trade_company_investment "
	}
}

on_center_of_trade_upgrade = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_center_of_trade_upgrade "
	}
    
	owner = { 
        change_variable = {
            which = cot_upgraded
            value = 1
        } 
    }
    
    if = {
        limit = {
            owner = {
                has_estate_privilege = estate_mercantile_guild_trade_hub_promotion
            }
        }
        
        area = {
            add_base_tax = 1
            add_base_production = 1
        }
    }
}

on_center_of_trade_downgrade = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_center_of_trade_downgrade "
	}

}

on_culture_promoted = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_culture_promoted "
	}
    
	change_variable = {
		which = cultures_promoted
		value = 1
	}
}

on_culture_demoted = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_culture_demoted "
	}
    
}

on_primary_culture_changed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_primary_culture_changed "
	}

}

# FROM = Previous Country, ROOT = Province
on_company_chartered = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_company_chartered "
	}
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_dependency_gained "
	}
	
    # Scourge Vassal - Convert Religion
    if = {
        limit = {
            NOT = { has_global_flag = destroyed_helm_flag }
            tag = P11
            FROM = {
                is_subject_of_type = scourge_vassal
            }
        }
        FROM = {
            change_religion = cult_of_the_damned
            capital_scope = {
                change_religion = cult_of_the_damned
            }
        }
    }
}

# ROOT = Overlord, FROM = Minor
on_dependency_lost = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_dependency_lost "
	}

}

# ROOT = New vassal, FROM = Overlord
on_create_vassal = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_create_vassal "
	}
}

# ROOT = Country establishing it
# First province in state is set
on_holy_order_established = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_holy_order_established "
	}

}

# When a minority is expelled to a colony
# THIS = Colony, ROOT = Colony, FROM = Home province
on_minority_expelled = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_minority_expelled "
	}

}

# THIS = Raiding country, FROM = Sea province
on_raid_coast = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_raid_coast "
	}
    
	if = {
		limit = {
			has_faction = pr_buccaneers
		}
		add_faction_influence = {
			faction = pr_buccaneers
			influence = 1
		}
        
        change_variable = {
            which = raid_coast_counter
            value = 1
        }
	}
}

# ROOT = Tag that captured the flagship, FROM = Tag that lost the flagship
on_flagship_captured = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_flagship_captured "
	}
    
    # Naval Acumen
    if = {
        limit = {
            has_government_mechanic = naval_acumen_mechanic
        }
        
        add_government_power = {
            mechanic_type = naval_acumen_mechanic
            power_type = naval_acumen
            value = 25
        }
    }
    if = {
        limit = {
            FROM = { has_government_mechanic = naval_acumen_mechanic }
        }
        
        FROM = {
            add_government_power = {
                mechanic_type = naval_acumen_mechanic
                power_type = naval_acumen
                value = -20
            }
        }
    }
    
	FROM = {
		set_country_flag = captured_flagship_country_flag
	}
	ROOT = {
		country_event = { id = wwu_flagship_events.2 }
		set_country_flag = trophy_hunter_flag
	}
	FROM = {
		country_event = { id = wwu_flagship_events.1 }
	}
}

# ROOT = Tag that destroyed the flagship, FROM = Tag that lost the flagship
on_flagship_destroyed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_flagship_destroyed "
	}
    
    # Naval Acumen
    if = {
        limit = {
            has_government_mechanic = naval_acumen_mechanic
        }
        
        add_government_power = {
            mechanic_type = naval_acumen_mechanic
            power_type = naval_acumen
            value = 25
        }
    }
    if = {
        limit = {
            FROM = { has_government_mechanic = naval_acumen_mechanic }
        }
        
        FROM = {
            add_government_power = {
                mechanic_type = naval_acumen_mechanic
                power_type = naval_acumen
                value = -20
            }
        }
    }
    
	FROM = {
		set_country_flag = sunk_flagship_country_flag
	}
	ROOT = {
		country_event = { id = wwu_flagship_events.4 }
	}
	FROM = {
		country_event = { id = wwu_flagship_events.3 }
	}
}

# this = Released country, FROM = Releasing country
on_country_released = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]. [From.GetName]: on_country_released "
	}
    
    government_on_country_released_effect = yes
}

# ROOT = province, FROM = country
on_trade_good_changed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]. [From.GetName]: on_trade_good_changed "
	}

	on_trade_good_changed_estate_privileges_effect = yes
}

# this = country
on_loan_repaid = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_loan_repaid "
	}

    on_loan_repaid_estate_privileges_effect = yes
}

# this = country
on_rebels_break_country = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_rebels_break_country "
	}
    
	add_country_modifier = {
		name = just_lost_to_rebels
		duration = 10
		hidden = yes
	}
}

# this = country
## Fires when you fire or replace your ADM advisor, in the moment before they are actually removed from their post.
## Note: Defining a new advisor here will result in the shortest appointment in history. Use on_post_adm_advisor_fired instead :)
on_pre_adm_advisor_fired = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_pre_adm_advisor_fired "
	}
	if = {
		limit = {
			has_country_flag = need_to_fire_adm_advisor
		}
		set_country_flag = just_fired_adm_advisor
		remove_advisor_by_category_no_action = ADM
	}
}

# this = country
on_pre_dip_advisor_fired = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_pre_dip_advisor_fired "
	}
	if = {
		limit = {
			has_country_flag = need_to_fire_dip_advisor
		}
		set_country_flag = just_fired_dip_advisor
		remove_advisor_by_category_no_action = DIP
	}
}

# this = country
on_pre_mil_advisor_fired = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_pre_mil_advisor_fired "
	}
	if = {
		limit = {
			has_country_flag = need_to_fire_mil_advisor
		}
		set_country_flag = just_fired_mil_advisor
		remove_advisor_by_category_no_action = MIL
	}
}

# this = country
on_post_adm_advisor_fired = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_post_adm_advisor_fired "
	}

}

# this = country
on_post_dip_advisor_fired = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_post_dip_advisor_fired "
	}
	
}

# this = country
on_post_mil_advisor_fired = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_post_mil_advisor_fired "
	}
	
}

# this = new client state, from = parent country
on_create_client_state = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_create_client_state "
	}
	
}

# this = new target, from = previous target (both can be non-existent tag)
on_change_revolution_target = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_change_revolution_target "
	}
}

# this = curia controller (enactor of the bull)
on_golden_bull_enacted = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_golden_bull_enacted "
	}
    
	set_country_flag = enacted_golden_bull
}


# province:  spawned whenever a new owner takes over the province
# FROM = The previous owner.
on_conquest = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_conquest "
	}
    
    remove_terrain_affinity = yes
    
	remove_named_unrest = estate_land_seized
	clr_province_flag = has_estate_unrest_flag
    
    # Hubris
    owner = {
        if = {
            limit = {
                has_government_mechanic = hubris_mechanic
            }
            
            add_government_power = {
                mechanic_type = hubris_mechanic
                power_type = hubris
                value = 1
            }
        }
    }
}

on_country_creation = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_country_creation "
	}
    
    events = {
        wwu_terrain_affinity.100
    }
}

on_federation_leader_change = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_federation_leader_change "
	}
    
	if = {
		limit = { tag = FROM }
		disband_federation = THIS
	}
	else = {
		# New strongest member becomes the new federation leader
		set_federation_leader = THIS
	}
}

#FROM = country pillaged, ROOT = country doing the pillaging
on_pillaged_capital = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_pillaged_capital "
	}
}

#FROM = country dev was transferred from, ROOT = country doing the transferring
on_transfer_development = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_transfer_development "
	}
    
}

on_colonial_type_change = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_colonial_type_change "
	}
    
	clr_country_flag = encourage_cash_crops_flag
}

on_estate_led_regency = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_estate_led_regency "
	}
    
}

on_estate_led_regency_surpassed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_estate_led_regency_surpassed "
	}
    
}

on_extended_regency = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_extended_regency "
	}
	
}

on_estate_removed = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_estate_removed "
	}
}

##scope = colony province, FROM = owner country or province if there's a minority expulsion source, fires when the colony is created
on_colony_established = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_colony_established "
	}
}

#scope = new country, FROM = parent country
on_colonial_nation_established = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_colonial_nation_established "
	}
}

##scope = colony province, FROM = owner country or province if there's a minority expulsion source
on_colonist_boosting_colony = {
	hidden_effect = {
        if = { 
            limit = { has_global_flag = enable_onaction_logging }
            log = "DEBUG - [Root.GetName]: on_colonist_boosting_colony "
        }
        
		if = {
			limit = {
				OR = {
					religion = noreligion
					#test if colonists outnumber natives
					variable_arithmetic_trigger = {
						custom_tooltip = colonysize_is_larger_than_nativesize_tt
						export_to_variable = {
							which = vab_colonysize
							value = trigger_value:colonysize
						}
						export_to_variable = {
							which = vab_nativesize
							value = trigger_value:native_size
						}
						check_variable = {
							which = vab_colonysize
							which = vab_nativesize
						}
					}
					is_in_capital_area = yes
				}
			}
			change_religion = FROM
		}
		if = {
			limit = {
				OR = {
					culture = noculture
					#test if colonists outnumber natives
					variable_arithmetic_trigger = {
						custom_tooltip = colonysize_is_larger_than_nativesize_tt
						export_to_variable = {
							which = vab_colonysize
							value = trigger_value:colonysize
						}
						export_to_variable = {
							which = vab_nativesize
							value = trigger_value:native_size
						}
						check_variable = {
							which = vab_colonysize
							which = vab_nativesize
						}
					}
					is_in_capital_area = yes
				}
			}
			change_culture = FROM
			change_original_culture = FROM
		}
	}
}

#ROOT = converted country, FROM = country which force converts ROOT, on_action gets called on Force religion peace and Enforce Religion subject interaction
on_force_conversion = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_force_conversion "
	}
    
}

on_institution_embracement = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_institution_embracement "
	}

}

on_national_focus_change = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_national_focus_change "
	}

}

on_capital_moved = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_capital_moved "
	}

}

#ROOT = province that was expanded in, FROM = country that did it
on_expanded_infrastructure = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_expanded_infrastructure "
	}
    
}

#ROOT = province that was centralized in
on_centralized_state = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_centralized_state "
	}
    
    if = {
        limit = {
            owner = {
                has_idea = wwu_economic_ideas_5
            }
        }
        area = {
            add_base_tax = 1
            add_base_production = 1
            add_base_manpower = 1
        }
    }
}

# ROOT = country
monarch_on_shipwreck = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: monarch_on_shipwreck "
	}
}

# ROOT = country
heir_on_shipwreck = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: heir_on_shipwreck "
	}
}

# ROOT = country
consort_on_shipwreck = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: consort_on_shipwreck "
	}
}

# ROOT = country
on_defender_of_faith_loss = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_defender_of_faith_loss "
	}
    
	clr_country_flag = claimed_defender_of_faith_flag
}

# ROOT = country
on_defender_of_faith_claim = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_defender_of_faith_claim "
	}
    
	set_country_flag = claimed_defender_of_faith_flag
}

# ROOT = country
on_hre_dismantled = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_hre_dismantled "
	}
    
}

# ROOT = country
on_new_age = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_new_age "
	}
    
    clr_country_flag = age_category_administrative
    clr_country_flag = age_category_court
    clr_country_flag = age_category_economic
    clr_country_flag = age_category_technology
    clr_country_flag = age_category_societal
    clr_country_flag = age_category_diplomatic
    clr_country_flag = age_category_espionage
    clr_country_flag = age_category_colonial
    clr_country_flag = age_category_army
    clr_country_flag = age_category_navy
    clr_country_flag = age_category_action
    
    # Temporary Age progression until events are done
    if = {
        limit = {
            ai = no
        }
        
        if = {
            limit = {
                current_age = age_trouble_in_azeroth
            }
            country_event = { id = wwu_age_progression.1 days = 10950 }
        }
        if = {
            limit = {
                current_age = age_burning_crusade
            }
            country_event = { id = wwu_age_progression.2 days = 10950 }
        }
        if = {
            limit = {
                current_age = age_wrath_of_the_lich_king
            }
            country_event = { id = wwu_age_progression.3 days = 10950 }
        }
        if = {
            limit = {
                current_age = age_cataclysm
            }
            country_event = { id = wwu_age_progression.4 days = 10950 }
        }
        if = {
            limit = {
                current_age = age_mists_of_pandaria
            }
            country_event = { id = wwu_age_progression.5 days = 10950 }
        }
    }
}

# ROOT = province
on_adm_exploited = {
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_adm_exploited "
	}
    
}

# ROOT = province
on_dip_exploited = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_dip_exploited "
	}
    
}

# ROOT = province
on_mil_exploited = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_mil_exploited "
	}
    
}

# ROOT = province
on_raze = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_raze "
	}
    
}

# ROOT = province
on_concentrate_development = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_concentrate_development "
	}
    
}

on_slacken_start = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_slacken_start "
	}
    
    if = {
        limit = {
            has_country_modifier = chaos_demon_hunter_fury
        }
        add_country_modifier = {
            name = slackening_modifier_illidari
            duration = -1
        }
    }
    else = {
        add_country_modifier = {
            name = slackening_modifier
            duration = -1
        }
    }
}
on_slacken_stop = {
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_slacken_start "
	}
    
	remove_country_modifier = slackening_modifier
	remove_country_modifier = slackening_modifier_illidari
}

#ROOT - Province
on_colony_finished = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_colony_finished "
	}
    
    if = {
        limit = {
            FROM = {
                has_estate_privilege = estate_mercantile_guild_trade_colonies
            }
        }
        
        add_base_production = 2
        
        # Only reduce if it is higher than 1
        if = {
            limit = {
                base_manpower = 2
            }
            
            add_base_manpower = -1
        }
    }
}

#ROOT - Country
on_advisor_hired = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_advisor_hired "
	}
}

#ROOT - Country, executed after on_advisor_hired!
on_adm_advisor_hired = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_adm_advisor_hired "
	}
}

#ROOT - Country, executed after on_advisor_hired!
on_dip_advisor_hired = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_dip_advisor_hired "
	}
}

#ROOT - Country, executed after on_advisor_hired!
on_mil_advisor_hired = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_mil_advisor_hired "
	}
}

#ROOT - Province, #FROM - Country that gets the core
on_core = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_core "
	}
}

#ROOT - Country
on_tech_taken = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_tech_taken "
	}
}

#ROOT - Country, executed after on_tech_taken!
on_adm_tech_taken = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_adm_tech_taken "
	}
}

#ROOT - Country, executed after on_tech_taken!
on_dip_tech_taken = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_dip_tech_taken "
	}
}

#ROOT - Country, executed after on_tech_taken!
on_mil_tech_taken = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName]: on_mil_tech_taken "
	}
} 

#ROOT - barraging country, FROM - barraged province 
on_barrage = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_barrage "
	}
}

#ROOT - barraging country, FROM - barraged province 
on_naval_barrage = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_naval_barrage "
	}
}

#ROOT - scorching country, FROM - scorched province
on_scorch_earth  = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_scorch_earth "
	}
}

#ROOT - Winer FROM - Loser
on_war_ended = { 
	if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_war_ended "
	}
}

#ROOT - Original alliance creator, FROM - Alliance accepter
on_alliance_broken = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_alliance_broken "
	}
    
}

#ROOT - Original marriage creator, FROM - Marriage accepter
on_royal_marriage_broken = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_royal_marriage_broken "
	}
}

#ROOT - Alliance sender, FROM - Alliance accepter
on_alliance_created = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_alliance_created "
	}
}

#ROOT - Marraige sender, FROM - marriage accepter
on_royal_marriage = { 
    if = { 
		limit = { has_global_flag = enable_onaction_logging }
		log = "DEBUG - [Root.GetName], [From.GetName]: on_royal_marriage "
	}
}

on_heir_disinherited = {
	
}

# Vanilla leftovers
on_harmonized_pagan = { }
on_harmonized_christian = { }
on_harmonized_muslim = { }
on_harmonized_jewish_group = { }
on_harmonized_zoroastrian_group = { }
on_harmonized_dharmic = { }
on_harmonized_mahayana = { }
on_harmonized_buddhism = { }
on_harmonized_shinto = { }
on_harmonized_vajrayana = { }
